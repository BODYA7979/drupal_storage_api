<?php

class StorageAPITestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Storage API',
      'description' => 'Test Storage API.',
      'group' => 'Storage',
    );
  }

  function setUp() {
    parent::setUp('storage_api');

    $web_user = $this->drupalCreateUser(array('administer storage'));
    $this->drupalLogin($web_user);
  }

  function testStorage() {
    
    $class = storage_class_load(1);
    $this->assertNotNull($class, t('Everything class created.'));
    $this->assertEqual($class->options['initial_container_id'], 1, t('Initial container set.'));
    
    $path = storage_api_new_local_storage_path();

    $container = array(
      'name' => t('Local2'),
      'service_id' => 'fs',
      'settings' => array(
        'path' => $path,
        'base_url' => $path,
      ),
    );

    $container = storage_container_new($container, FALSE);
    $container->create();
    $class->options['initial_container_id'] = $container->container_id;
    drupal_write_record('storage_class', $class, 'class_id');
    $class = storage_class_load(1);
    $this->assertEqual($class->options['initial_container_id'], $container->container_id, t('Initial container changed.'));
    
    $selector = storage_selector('storage_api', 'test');
    $selector->create();
    
    $options = array(
      'filepath' => 'CHANGELOG.txt',
      'get_filename' => TRUE,
    );

    $storage = $selector->storageAdd($options);
    $this->assertNotNull($storage, t('Store file.'));
    
    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', $container->container_id)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertTrue($exists, t('Intial instance exists.'));
    
    $this->cronRun();

    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', 1)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertTrue($exists, t('Final instance exists.'));

    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', $container->container_id)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertFalse($exists, t('Intial instance removed.'));
  }
}

