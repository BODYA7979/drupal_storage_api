<?php
// $Id$

class StorageAPITestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Storage API',
      'description' => 'Test Storage API.',
      'group' => 'Storage',
    );
  }

  function setUp() {
    parent::setUp('storage_api', 'storage_fs');

    $web_user = $this->drupalCreateUser(array('administer storage'));
    $this->drupalLogin($web_user);
  }

  function testStorage() {
  
    $this->drupalGet('admin/structure/storage/services/fs');
    $this->assertResponse(200, t('Filesystem service registered.'));
    
    $class = storage_class_load(1);
    $this->assertNotNull($class, t('Everything class created.'));
    $this->assertEqual($class->options['initial_container_id'], 1, t('Initial container set.'));
    
    $container = storage_fs_default_container_create();
    $class->options['initial_container_id'] = $container->container_id;
    drupal_write_record('storage_class', $class, 'class_id');
    $class = storage_class_load(1);
    $this->assertEqual($class->options['initial_container_id'], $container->container_id, t('Initial container changed.'));
    
    $selector_id = storage_new_selector_id();
    
    $options = array(
      'filepath' => 'CHANGELOG.txt',
      'get_filename' => TRUE,
    );
    
    $storage_id = storage_add($selector_id, $options);
    $storage = storage_load($storage_id);
    $this->assertNotNull($storage, t('Store file.'));
    
    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', $container->container_id)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertTrue($exists, t('Intial instance exists.'));
    
    $this->cronRun();

    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', 1)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertTrue($exists, t('Final instance exists.'));

    $exists = db_select('storage_instance')
      ->condition('file_id', $storage->file_id)
      ->condition('container_id', $container->container_id)
      ->countQuery()
      ->execute()
      ->fetchField();
      
    $this->assertFalse($exists, t('Intial instance removed.'));
  }
}

