<?php
// $Id$

// Copyright 2008-2009 Jonathan Brown


/**
* Implements hook_storage_service_info() .
*/
function storage_s3_storage_service_info() {
  
  $info = array(
    'name' => t('Amazon S3'),
    'dynamic' => FALSE,
    'local' => FALSE,
    'direct' => FALSE,
    'can_copy' => TRUE
  );
  
  return $info;
}


function _storage_s3_signature($components, $secret_access_key) {

  return base64_encode(hash_hmac('sha1', utf8_encode(implode("\n", $components)), $secret_access_key, TRUE));
}


function _storage_s3_request($container, $method, $bucket = NULL, $object_name = NULL, $file = NULL) {
  $result = array();
  $date = date(DATE_RFC1123, time());   // we don't use $_SERVER['REQUEST_TIME'] in case it is too old

  $components = array($method, '', '', $date);
  
  $headers[] = 'Date: ' . $date;

  $curl_options = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE
  );

  switch($method) {
  
    case 'PUT':
      $curl_options[CURLOPT_PUT] = TRUE;
      
      if($file) {

        if($container['serving'] == STORAGE_API_SERVING) {
          $headers[] = 'x-amz-acl: public-read';
          $components[] = 'x-amz-acl:public-read';
        }
        
        if($file['copy_source']) {
          $headers[] = 'x-amz-copy-source: ' . $file['copy_source'];
          $components[] = 'x-amz-copy-source:' . $file['copy_source'];
        }
      }

      if($file['filepath']) {
        $fp = fopen($file['filepath'], 'r');
        
        $components[1] = base64_encode($file['md5']);
        $components[2] = $file['mimetype'];
        
        $headers = array_merge($headers, storage_api_http_headers($file));
        
        $curl_options[CURLOPT_INFILE] = $fp;
        $curl_options[CURLOPT_INFILESIZE] = $file['size'];
      }
      else {
        $curl_options[CURLOPT_INFILESIZE] = 0;
        $headers[] = 'Expect:';
      }
      
      break;
      
    case 'HEAD':
      $curl_options[CURLOPT_NOBODY] = TRUE;
      break;
      
    case 'GET':
      if($object_name) {
        $result['filepath'] = tempnam(file_directory_temp(), '');
        $fp = fopen($result['filepath'], 'w');
        $curl_options[CURLOPT_FILE] = $fp;
      }
      break;
      
    case 'DELETE':
      $curl_options[CURLOPT_CUSTOMREQUEST] = 'DELETE';
      break;
  }
  
  if($bucket)
    $object_name = '/' . $object_name;
  
  $components[] = '/' . $bucket . $object_name;
  
  $signature = _storage_s3_signature($components, $container['settings']['secret_access_key']);
  $headers[] = 'Authorization: AWS ' . $container['settings']['access_key_id'] . ':' . $signature;

  $curl_options[CURLOPT_HTTPHEADER] = $headers;
  
  if($bucket)  
    $bucket .= '.';
  
  $ch = curl_init('http://' . $bucket . 's3.amazonaws.com' . $object_name);
  curl_setopt_array($ch, $curl_options);
  $transfer = curl_exec($ch);
  $result += curl_getinfo($ch);
  curl_close($ch);
  
  if($fp)
    fclose($fp);
    
  if($result['filepath'] && $result['http_code'] != 200) {
    @unlink($result['filepath']);
    unset($result['filepath']);
  }
  
  if(is_string($transfer) && $transfer != '') {
    $result['transfer'] = $transfer;
    $result['simplexml'] = @simplexml_load_string($transfer);
  }
  
  return $result;
}


function _storage_s3_url($container, $s3_object) {

  $path = 'http://' . $container['settings']['bucket'] . '.s3.amazonaws.com/' . $s3_object;

  if($container['serving'] == STORAGE_API_ACCESS_CONTROL) {
    $query['AWSAccessKeyId'] = $container['settings']['access_key_id'];
    $query['Expires'] = $_SERVER['REQUEST_TIME'] + 60 * 60;
    
    $components = array(
      'GET',
      '',
      '',
      $query['Expires'],
      '/' . $container['settings']['bucket'] . '/' . $s3_object
    );
    
    $query['Signature'] = _storage_s3_signature($components, $container['settings']['secret_access_key']);
  }

  return url($path, array('query' => $query));
}


/**
* Implements hook_storage_container_settings_form() .
*/
function storage_s3_storage_container_settings_form($settings, $serving, $edit) {

  $items['access_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Key ID'),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => $settings['access_key_id']
  );
  
  $items['secret_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Access Key'),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => $settings['secret_access_key']
  );

  if(!$edit) {

    $items['bucket'] = array(
      '#type' => 'textfield',
      '#title' => t('Bucket name'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#default_value' => $settings['bucket']
    );
  }
  
/*
  $items['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#default_value' => $settings['prefix']
  );
*/

  return $items;
}


/**
* Implements hook_storage_container_validate() .
*/
function storage_s3_storage_container_validate($container, $edit) {

  if(!$container['settings']['access_key_id']) {
    form_set_error('settings][access_key_id', t('Access Key ID field is required.'));
  }

  if(!$container['settings']['secret_access_key']) {
    form_set_error('settings][secret_access_key', t('Secret Access Key field is required.'));
  }
  
  if(!$container['settings']['bucket']) {
    form_set_error('settings][bucket', t('Bucket name field is required.'));
  }
  
  if(form_get_errors())
    return;

  $result = _storage_s3_request($container, 'GET');   // HEAD doesn't work
    
  if($result['http_code'] != 200) {
    $msg = t('Failed to authenticate with Amazon S3.');
    
    if($result['simplexml']->Message)
      $msg .= t(' Message returned: <i>') . $result['simplexml']->Message . '</i>';
    
    form_set_error('settings', $msg);
    return;
  }

  $result = _storage_s3_request($container, 'HEAD', $container['settings']['bucket']);

  if($result['http_code'] == 403) {
    form_set_error('settings][bucket', t('The bucket is not available.'));
    return;
  }
}


/**
* Implements hook_storage_container_create() .
*/
function storage_s3_storage_container_create($container) {

  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket']);
  
  return $container;
}


/**
* Implements hook_storage_container_info() .
*/
function storage_s3_storage_container_info($container) {

  $info = array(
    t('Bucket') => $container['settings']['bucket'],
//    t('Prefix') => $container['settings']['prefix']
  );

  return $info;
}


/**
* Implements hook_storage_object_instance_create() .
*/
function storage_s3_storage_object_instance_create($container, $file) {

  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'object-' . $file['object_id'], $file);
  
  return $result['http_code'] == 200;
}


/**
* Implements hook_storage_object_instance_copy() .
*/
function storage_s3_storage_object_instance_copy($container, $file, $source_container) {

  $file['copy_source'] = '/' . $source_container['settings']['bucket'] . '/object-' . $file['object_id'];
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'object-' . $file['object_id'], $file);
    
  if($result['http_code'] == 200 && $result['simplexml']) {

    if($result['simplexml']->getName() == 'CopyObjectResult')
      return TRUE;
  }
  
  return FALSE;
}


/**
* Implements hook_storage_object_instance_destroy() .
*/
function storage_s3_storage_object_instance_destroy($container, $file) {
  
  $result = _storage_s3_request($container, 'DELETE', $container['settings']['bucket'], 
    'object-' . $file['object_id']);
  
  return $result['http_code'] == 204;
}


/**
* Implements hook_storage_object_instance_get_filepath() .
*/
function storage_s3_storage_object_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container, 'GET', $container['settings']['bucket'], 
    'object-' . $file['object_id']);

  return $result['filepath'];
}


/**
* Implements hook_storage_object_instance_serve() .
*/
function storage_s3_storage_object_instance_serve($container, $file) {

  return _storage_s3_url($container, 'object-' . $file['object_id']);
}


/**
* Implements hook_storage_file_instance_create() .
*/
function storage_s3_storage_file_instance_create($container, $file) {
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'file-' . $file['file_id'], $file);
  
  return $result['http_code'] == 200;
}


/**
* Implements hook_storage_file_instance_copy() .
*/
function storage_s3_storage_file_instance_copy($container, $file, $source_container) {
  
  $file['copy_source'] = '/' . $source_container['settings']['bucket'] . '/file-' . $file['file_id'];
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'file-' . $file['file_id'], $file);
  
  if($result['http_code'] == 200 && $result['simplexml']) {

    if($result['simplexml']->getName() == 'CopyObjectResult')
      return TRUE;
  }
  
  return FALSE;
}


/**
* Implements hook_storage_file_instance_destroy() .
*/
function storage_s3_storage_file_instance_destroy($container, $file) {
  
  $result = _storage_s3_request($container, 'DELETE', $container['settings']['bucket'], 
    'file-' . $file['file_id']);
  
  return $result['http_code'] == 204;
}


/**
* Implements hook_storage_file_instance_get_filepath() .
*/
function storage_s3_storage_file_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container, 'GET', $container['settings']['bucket'], 
    'file-' . $file['file_id']);

  return $result['filepath'];
}


/**
* Implements hook_storage_file_instance_serve() .
*/
function storage_s3_storage_file_instance_serve($container, $file) {

  return _storage_s3_url($container, 'file-' . $file['file_id']);
}

