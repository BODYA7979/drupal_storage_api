<?php
// $Id$

// Copyright 2009 Jonathan Brown


/**
 * Implement hook_storage_service_info() .
 */
function storage_ftp_storage_service_info() {
  
  $info = array(
    'name' => t('FTP'),
    'local' => FALSE,
    'direct' => FALSE,
    'can_copy' => FALSE,
  );
  
  return $info;
}


function _storage_ftp_login($settings) {

  $ftp = @ftp_connect($settings['host'], 
    $settings['port'] ? $settings['port'] : NULL);
  
  if(!$ftp)
    return FALSE;
  
  if(!@ftp_login($ftp, $settings['username'], $settings['password'])) {
    @ftp_close($ftp);
    return FALSE;
  }
  
  @ftp_pasv($ftp, TRUE);
  
  return $ftp;
}


/**
 * Implement hook_storage_container_settings_form() .
 */
function storage_ftp_storage_container_settings_form(StorageContainer $container, $edit) {

  $items['host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#description' => t('The FTP server address. This parameter shouldn\'t have any trailing slashes and shouldn\'t be prefixed with ftp:// .'),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => isset($container->settings['host']) ? $container->settings['host'] : NULL,
  );
  
  $items['port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t('If omitted, the default FTP port (21) will be used.'),
    '#maxlength' => 5,
    '#size' => 5,
    '#default_value' => isset($container->settings['port']) ? $container->settings['port'] : NULL,
  );
  
  $items['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t(''),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => isset($container->settings['username']) ? $container->settings['username'] : NULL,
  );

  $items['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
  );

  $items['directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory'),
    '#description' => t('The directory to be created on the FTP server.'),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => isset($container->settings['directory']) ? $container->settings['directory'] : NULL,
  );
  
  $items['permissions'] = array(
    '#type' => 'textfield',
    '#title' => t('File permissions'),
    '#description' => t('Octal format, e.g. 644.<br />For serving, ensure the files are readable by the web server.<br />If omitted, the FTP server\'s default permissions will be used.'),
    '#maxlength' => 4,
    '#size' => 5,
    '#default_value' => isset($container->settings['permissions']) ? $container->settings['permissions'] : NULL,
  );
  
  if($container->capability) {

    $items['base_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Base URL'),
      '#description' => t('The URL of the directory specified above.'),
      '#default_value' => isset($container->settings['base_url']) ? $container->settings['base_url'] : NULL,
    );

    $items['base_url_rtmp'] = array(
      '#type' => 'textfield',
      '#title' => t('Base RTMP URL'),
      '#description' => t('The RTMP URL of the directory specified above.<br />This is for Flash media streaming.'),
      '#default_value' => isset($container->settings['base_url_rtmp']) ? $container->settings['base_url_rtmp'] : NULL,
    );
  }

  return $items;
}


/**
 * Implement hook_storage_container_validate() .
 */
function storage_ftp_storage_container_validate(StorageContainer $container, $edit) {

  if (!$container->settings['host']) {
    form_set_error('settings][host', t('Host field is required.'));
  }

  if (!$container->settings['username']) {
    form_set_error('settings][username', t('Username field is required.'));
  }
  
  if (!$container->settings['directory']) {
    form_set_error('settings][directory', t('Password field is required.'));
  }

  if (form_get_errors())
    return;

  $ftp = _storage_ftp_login($container->settings);
  
  if (!$ftp)
    form_set_error('settings', t('Failed to authenticate.'));
}


/**
 * Implement hook_storage_container_create() .
 */
function storage_ftp_storage_container_create(StorageContainer $container) {

  $ftp = _storage_ftp_login($container->settings);
  
  if(!$ftp)
    return FALSE;
    
  $path = drupal_get_path('module', 'storage_api');

  $success = ftp_mkdir($ftp, $container->settings['directory']);
  
  if($success)
    $success = ftp_chdir($ftp, $container->settings['directory']);

  if($success)
    $success = ftp_put($ftp, '.htaccess', $path . '/files.htaccess', FTP_BINARY);

  if($success && $container->settings['permissions'])
    $success = ftp_site($ftp, 'chmod ' . $container->settings['permissions'] . ' .htaccess');

  @ftp_close($ftp);

  if(!$success) {
    throw new Exception();
  }
}


/**
 * Implement hook_storage_container_info() .
 */
function storage_ftp_storage_container_info(StorageContainer $container) {

  $info = array(
    t('Host') => $container->settings['host'],
    t('Port') => $container->settings['port'] ? $container->settings['port'] : 21,
    t('Username') => $container->settings['username'],
    t('Directory') => $container->settings['directory'],
  );
  
  if($container->settings['permissions'])
    $info[t('File permissions')] = $container->settings['permissions'];

  if($container->capability)
    $info[t('Base URL')] = url($container->settings['base_url'], array('absolute' => TRUE));

  return $info;
}


/**
 * Implement hook_storage_object_instance_create() .
 */
function storage_ftp_storage_object_instance_create(StorageContainer $container, Storage $storage, array $source) {
  
  $ftp = _storage_ftp_login($container->settings);
  
  if(!$ftp)
    return FALSE;
    
  $filename = $storage->object_id;

  
  // We need the filename to have an extension that matches its mime type
  // so the webserver serves the file with the correct mime type.

  $extension = storage_api_mime_extension($storage->mimetype);
  
  if($extension)
    $filename .= '.' . $extension;
  
  $success = @ftp_chdir($ftp, $container->settings['directory'] . '/objects');
  
  if($success)
   $success = @ftp_put($ftp, $filename, $source['filepath'], FTP_BINARY);
   
  if($success && $container->settings['permissions'])
    $success = @ftp_site($ftp, 'chmod ' . $container->settings['permissions'] . ' ' . $filename);
  
  @ftp_close($ftp);
  
  if($success)
    return $filename;
}


/**
 * Implement hook_storage_instance_create() .
 */
function storage_ftp_storage_instance_create(StorageContainer $container, Storage $storage, array $source) {

  $ftp = _storage_ftp_login($container->settings);
  
  if(!$ftp)
    return FALSE;
    
  
  // File instances need to use the actual filename so the webserver serves them
  // with their filename in the Content-Disposition http header.
  
  // This means we cannot use the Cache-control max-age http header
  // as URLs may be reused.
  
  $filename = $container->unique_filename($source['filename']);
  
  $success = @ftp_chdir($ftp, $container->settings['directory']);
  
  if($success)
    $success = @ftp_put($ftp, $filename, $source['filepath'], FTP_BINARY);
  
  if($success && $container->settings['permissions'])
    $success = @ftp_site($ftp, 'chmod ' . $container->settings['permissions'] . ' ' . $filename);

  @ftp_close($ftp);
  
  if($success)
    return $filename;
}


/**
 * Implement hook_storage_instance_destroy() .
 */
function storage_ftp_storage_instance_destroy(StorageContainer $container, Storage $storage, $reference) {

  $ftp = _storage_ftp_login($container->settings);
  
  if(!$ftp)
    return FALSE;
    
  $result = @ftp_delete($ftp, $container->settings['directory'] . $reference);
  
  @ftp_close($ftp);
  
  return $result;
}


/**
 * Implement hook_storage_instance_get_filepath() .
 */
function storage_ftp_storage_instance_get_filepath(StorageContainer $container, Storage $storage, $reference) {

  $ftp = _storage_ftp_login($container->settings);
  
  if(!$ftp)
    return FALSE;
  
  $filepath = tempnam(file_directory_temp(), '');
  $result = @ftp_get($ftp, $filepath, $container->settings['directory'] . $reference, FTP_BINARY);
  
  @ftp_close($ftp);
  
  if($result)
    return $filepath;

  @unlink($filepath);
  return FALSE;
}


/**
 * Implement hook_storage_instance_serve() .
 */
function storage_ftp_storage_instance_serve(StorageContainer $container, Storage $storage, $reference) {

  return $container->settings['base_url'] . $reference;
}


/**
 * Implement hook_storage_instance_serve_rtmp() .
 */
function storage_ftp_storage_instance_serve_rtmp(StorageContainer $container, Storage $storage, $reference) {

  if($container->settings['base_url_rtmp']) {
  
    return array(
      'streamer' => $container->settings['base_url_rtmp'],
      'file' => $reference,
    );
  }

  return FALSE;
}

