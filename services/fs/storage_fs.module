<?php
// $Id$

// Copyright 2008-2009 Jonathan Brown


/**
 * Implement hook_storage_service_info() .
 */
function storage_fs_storage_service_info() {
  
  $info = array(
    'name' => t('Filesystem'),
    'local' => TRUE,
    'direct' => FALSE,
    'can_copy' => FALSE,
  );
  
  return $info;
}


/**
 * Implement hook_storage_container_settings_form() .
 */
function storage_fs_storage_container_settings_form($container, $edit) {

  $items['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory path'),
    '#description' => t("Can be absolute or relative."),
    '#default_value' => isset($container->settings['path']) ? $container->settings['path'] : file_directory_path(),
    '#required' => TRUE,
    '#validated' => TRUE,
  );
  
  if($edit) {
    $items['path']['#description'] .= '<br />' . 
      t('If this setting is changed, the directory must be moved manually to the new path.');
  }
  
  if($container->capability) {
  
    $description  = "The URL path of the directory path specified above (typically exactly the same).<br/>";
    $description .= "Can be absolute or relative.<br />";

    $items['base_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Base URL path'),
      '#description' => t($description),
      '#default_value' => isset($container->settings['base_url']) ? $container->settings['base_url'] : file_directory_path(),
      '#required' => TRUE,
      '#validated' => TRUE,
    );
  }

  return $items;
}


/**
 * Implement hook_storage_container_validate() .
 */
function storage_fs_storage_container_validate($container, $edit) {

  if (!$container->settings['path']) {
    form_set_error('settings][path', t('Directory path field is required.'));
  }
  elseif (!$edit) {
    if (file_prepare_directory($container->settings['path'])) {
      form_set_error('settings][path', t('Directory already exists.'));
    }
  }
  
  if ($container->capability) {
    if (!$container->settings['base_url']) {
      form_set_error('settings][base_url', t('Base URL path field is required.'));
    }
  }
}


/**
 * Implement hook_storage_container_create() .
 */
function storage_fs_storage_container_create($container) {

  $storage_api_path = drupal_get_path('module', 'storage_api');

  if (!file_prepare_directory($container->settings['path'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    throw new Exception();
  }

/*
  copy($storage_api_path . '/files.htaccess', $container['settings']['path'] . '/.htaccess');
*/
}


function storage_fs_default_container_create() {

  $path = file_create_filename('storage', file_directory_path());

  $container = array(
    'name' => t('Local'),
    'service_id' => 'fs',
    'capability' => STORAGE_API_SERVING,
    'settings' => array(
      'path' => $path,
      'base_url' => $path,
    ),
  );

  try {
    $container = new StorageContainer($container, FALSE);
    $container->create();
  }
  catch (Exception $e) {
    return FALSE;
  }
  
  return $container;
}


/**
 * Implement hook_storage_container_info() .
 */
function storage_fs_storage_container_info($container) {

  $info['Free space'] = storage_format_size(@disk_free_space($container->settings['path']));
  $info['Directory'] = realpath($container->settings['path']);

  if($container->capability)
    $info['Base URL'] = url($container->settings['base_url'], array('absolute' => TRUE));

  return $info;
}


/**
 * Implement hook_storage_container_destroy() .
 */
function storage_fs_storage_container_destroy($container) {
  
  return TRUE;
}


/**
 * Implement hook_storage_instance_create() .
 */
function storage_fs_storage_instance_create($container, $storage) {

  // File instances need to use the actual filename so the webserver serves them
  // with their filename in the Content-Disposition http header.
  
  // This means we cannot use the Cache-control max-age http header
  // as URLs may be reused.
  
  $filename = $container->unique_filename($storage->filename);
  
  $path = $container->settings['path'] . '/' . $filename;

  if(empty($storage->keep_me))
    $success = @rename($storage->filepath, $path);
  else
    $success = @copy($storage->filepath, $path);

  if($success)
    return $filename;
}


/**
 * Implement hook_storage_instance_destroy() .
 */
function storage_fs_storage_instance_destroy($container, $storage, $reference) {
    
  @unlink($container->settings['path'] . '/' . $reference);
  
  return TRUE;
}


/**
 * Implement hook_storage_instance_get_filepath() .
 */
function storage_fs_storage_instance_get_filepath($container, $storage, $reference) {

  return $container->settings['path'] . '/' . $reference;
}


/**
 * Implement hook_storage_instance_serve() .
 */
function storage_fs_storage_instance_serve($container, $storage, $reference) {

  return $container->settings['base_url'] . '/' . $reference;
}

/*
function storage_fs_storage_instance_serve($container, $storage) {
  storage_api_set_http_headers($storage);

  @readfile($container['settings']['path'] . '/' . $container['reference']);
  exit();
}
*/

