<?php

// Copyright 2008-2011 Jonathan Brown


/**
 * Implements hook_requirements() .
 */
function storage_api_requirements($phase) {
  $curl = FALSE;

  if (function_exists('curl_version')) {
    $curl = curl_version();
  }
  
  $t = get_t();
  $description = $t('Storage API requires that <a href="http://php.net/manual/en/book.curl.php">cURL</a> be available to PHP.');

  $requirements = array(
    'storage_api_curl' => array(
      'title' => 'Storage API - cURL',
      'value' => ($curl ? $curl['version'] : 'Not found'),
      'description' => $curl ? NULL : $description,
      'severity' => $curl ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    ),
  );
  
  if ($phase == 'runtime') {

    if (extension_loaded('fileinfo')) {
      $finfo = @finfo_open(FILEINFO_MIME);
    
      if ($finfo !== FALSE) {
        $value = t("Fileinfo PHP extension");
      }
    }
    
    if (!isset($value)) {
      exec('file', $output, $result);
      
      if ($result != 127) {
        $value = t("Unix 'file' command");
      }
      else {
        $value = t("Filename extension mapping");
      }
    }

    $requirements['storage_api_mime'] = array(
      'title' => t('Storage API - MIME detection'),
      'value' => $value,
      'severity' => REQUIREMENT_OK,
    );

    $services = storage_service_info();
  
    // Get service_ids of all containers.
    $service_ids = db_select('storage_container')
      ->fields('storage_container', array('service_id'))
      ->groupBy('service_id')
      ->execute()
      ->fetchCol();
      
    foreach ($service_ids as $service_id) {
      $container = storage_container_new(array('service_id' => $service_id), FALSE);

      $result = $container->serviceCheck();
      
      if ($result !== TRUE) {
        
        $requirements['storage_api_' . $service_id] = array(
          'title' => t('Storage API - ') . $services[$service_id]['name'] . t(' service'),
          'value' => t('Not configured'),
          'description' => $result,
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
  }
  
  return $requirements;
}


/**
 * Implements hook_schema() .
 */
function storage_api_schema() {

  $schema['storage_container'] = array(
    'fields' => array(
      'container_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'service_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'settings' => array('type' => 'blob', 'not null' => TRUE, 'serialize' => TRUE),
      'access_control' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'acsc' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'suspended' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0)
    ),
    'primary key' => array('container_id')
  );

  $schema['storage_class'] = array(
    'fields' => array(
      'class_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'options' => array('type' => 'blob', 'not null' => TRUE, 'serialize' => TRUE),
    ),
    'primary key' => array('class_id')
  );

  $schema['storage_class_container'] = array(
    'fields' => array(
      'class_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'weight' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'serving' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
      'remove' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0),
    ),
    'primary key' => array('class_id', 'container_id')
  );

  $schema['storage_selector'] = array(
    'fields' => array(
      'selector_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'class_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'migrating' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0)
    ),
    'primary key' => array('selector_id', 'class_id')
  );

  $schema['storage_file'] = array(
    'fields' => array(
      'file_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'filename' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'size' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'big', 'not null' => TRUE),
      'md5' => array('type' => 'blob', 'mysql_type' => 'BINARY(16)', 'length' => 16, 'not null' => TRUE),
      'mimetype' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'primary key' => array('file_id'),
    'unique keys' => array(
      'unique_key' => array('filename', 'size', 'md5')
    )
  );
  
  $schema['storage'] = array(
    'fields' => array(
      'storage_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'selector_id' => array('type' => 'varchar', 'length' => 255),
      'file_id' => array('type' => 'int', 'unsigned' => TRUE),
      'source_url' => array('type' => 'varchar', 'length' => 4095, 'not null' => TRUE, 'default' => ''),
      'obtained' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'module' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'type' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'nid' => array('type' => 'int', 'unsigned' => TRUE),
      'check_me' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'initial_container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE),
      'data' => array('type' => 'blob', 'not null' => TRUE, 'serialize' => TRUE),
      'serving_container' => array('type' => 'varchar', 'length' => '16383', 'not null' => FALSE, 'serialize' => TRUE),
      'servings' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'last_touched' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
    ),
    'primary key' => array('storage_id'),
    'indexes' => array(
      'check_me' => array('check_me'),
      'selector_id' => array('selector_id'),
      'servings' => array('servings')
    )
  );

  $schema['storage_instance'] = array(
    'fields' => array(
      'container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'reference' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'file_id' => array('type' => 'int', 'unsigned' => TRUE),
    ),
    'primary key' => array('container_id', 'reference'),
    'unique keys' => array(
      'unique_key' => array('container_id', 'file_id'),
    ),
  );
  
  $schema['storage_serving'] = array(
    'fields' => array(
      'timestamp' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'storage_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE),
      'size' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'sid' => array('type' => 'char', 'length' => 128, 'not null' => TRUE),
      'ip_addr' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'referrer' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'indexes' => array(
      'container_id' => array('container_id'),
      'storage_id' => array('storage_id'),
      'timestamp' => array('timestamp'),
      'uid' => array('uid')
    )
  );
  
  return $schema;
}


/**
 * Implements hook_install() .
 */
function storage_api_install() {

  // Create a class.
  $class = new StorageClass(array(
    'name' => t('Everything'), 
    'options' => array(
      'redirect' => FALSE,
      'serve_source_url' => FALSE,
    )
  ));
  
  $class->create();
  
  variable_set('storage_api_initial_class', $class->class_id);

  $path = storage_api_new_local_storage_path();

  $container = array(
    'name' => t('Local'),
    'service_id' => 'fs',
    'access_control' => FALSE,
    'acsc' => FALSE,
    'settings' => array(
      'path' => $path,
      'base_url' => $path,
    ),
  );

  try {
    $container = storage_container_new($container, FALSE);
    $container->create();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return;
  }
  
  $class->addContainer($container);
}

