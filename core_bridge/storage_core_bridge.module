<?php
// $Id$

// Copyright 2010 Jonathan Brown


function storage_core_bridge_selector_name($field_name) {

  return str_replace('_', '-', $field_name);
}

/**
 * Implements hook_stream_wrappers() .
 */
function storage_core_bridge_stream_wrappers() {

  if (strpos($_GET['q'], 'admin/structure/types/manage/') === 0 &&
    arg(5) == 'fields')
  {
    $field_name = storage_core_bridge_selector_name(arg(6));
  }
  else {
    $field_name = NULL;
  }
  
  $selectors = variable_get('storage_core_bridge_selectors', array());
  
  if ($field_name) {
    if (!in_array($field_name, $selectors)) {
    
      storage_selector('storage_core_bridge', $field_name)->create();
      $selectors[] = $field_name;
      variable_set('storage_core_bridge_selectors', $selectors);
    }
  }
  
  $wrappers = array();  
  foreach ($selectors as $selector_name) {
  
    if ($selector_name == $field_name) {
      $type = STREAM_WRAPPERS_NORMAL;
    }
    else {
      $type = STREAM_WRAPPERS_HIDDEN;
    }

    $wrappers['storage-' . $selector_name] = array(
      'name' => t('Storage class (select below)'),
      'class' => 'DrupalStorageStreamWrapper',
      'description' => t('Files managed by Storage API.'),
      'type' => $type,
    );
  }
  
  return $wrappers;
}


/**
 * Implement hook_form_FORM_ID_alter() .
 */
function storage_core_bridge_form_field_ui_field_settings_form_alter(&$form, &$form_state) {

  if ($form['field']['type']['#value'] != 'file') {
    return;
  }

  $form['field']['settings']['storage_class'] = storage_selector('storage_core_bridge', 
    storage_core_bridge_selector_name($form['field']['field_name']['#value']))->formItem(t('Storage class'));

  $form['#submit'][] = 'storage_core_bridge_field_ui_field_settings_form_submit';
}


function storage_core_bridge_field_ui_field_settings_form_submit($form, &$form_state) {

  storage_selector('storage_core_bridge', storage_core_bridge_selector_name($form['field']['field_name']['#value']))
    ->submit($form_state['values']['field']['settings']['storage_class']);
}


/**
 * Implement hook_form_FORM_ID_alter() .
 */
function storage_core_bridge_form_field_ui_field_edit_form_alter(&$form, &$form_state) {

  if ($form['#field']['type'] != 'file') {
    return;
  }

  $form['field']['settings']['storage_class'] = storage_selector('storage_core_bridge', 
    storage_core_bridge_selector_name($form['#field']['field_name']))->formItem(t('Storage class'));

  $form['#submit'][] = 'storage_core_bridge_field_ui_field_edit_form_submit';
}


function storage_core_bridge_field_ui_field_edit_form_submit($form, &$form_state) {

  storage_selector('storage_core_bridge', storage_core_bridge_selector_name($form['#field']['field_name']))
    ->submit($form_state['values']['field']['settings']['storage_class']);
}


function _storage_core_bridge_load($uri) {

  $storage_id = db_select('storage')
    ->fields('storage', array('storage_id'))
    ->condition('storage.uri', $uri)
    ->execute()
    ->fetchField();
    
  return storage_load($storage_id);
}


class DrupalStorageStreamWrapper implements DrupalStreamWrapperInterface {
  protected $uri;
  protected $filepath;
  protected $fp;

  protected function selectorName() {
  
    return substr(file_uri_scheme($this->uri), 8);
  }

  public function url_stat($uri, $flags) {
    global $storage_core_bridge_filename;
    $filename = file_uri_target($uri);

    if ($filename == '') {
      unset($storage_core_bridge_filename);
      return array('mode' => 0040666);
    }
    
    if (!isset($storage_core_bridge_filename))
      $storage_core_bridge_filename = $filename;

    $storage = _storage_core_bridge_load($uri);
    
    if (!$storage)
      return FALSE;
      
    $stat = array(
      'mode' => 0100666,
      'size' => $storage->size,
      'atime' => $storage->last_touched,
      'mtime' => $storage->obtained,
      'ctime' => $storage->obtained,
    );

    return $stat;
  }
  
  public function setUri($uri) {
    $this->uri = $uri;
  }
  
  public function getTarget($uri = NULL) {
    if (!isset($uri)) {
      $uri = $this->uri;
    }

    list($scheme, $target) = explode('://', $uri, 2);

    // Remove erroneous leading or trailing, forward-slashes and backslashes.
    return trim($target, '\/');
  }

  public function mkdir($uri, $mode, $options) {    // dont define?
    dsm(__FUNCTION__);
    dsm(func_get_args());

    return TRUE;
  }
  
  public function chmod($mode) {
    return TRUE;
  }
  
  public function stream_open($uri, $mode, $options, &$opened_url) {
    $this->uri = $uri;
    $this->filepath = drupal_tempnam('temporary://', 'storage');
    $this->fp = fopen($this->filepath, "w");
    return TRUE;
  }
  
  public function stream_write($data) {
    return fwrite($this->fp, $data);
  }
  
  public function stream_flush() {
    return fflush($this->fp);
  }
  
  public function stream_close() {
    global $storage_core_bridge_filename;
    fclose($this->fp);
    
    $options = array(
      'filepath' => $this->filepath,
      'filename' => $storage_core_bridge_filename,
      'module' => 'storage_core_bridge',
      'uri' => $this->uri,
    );
    
    try {
      storage_add('storage_core_bridge/' . $this->selectorName(), $options);
    }
    catch (Exception $e) {}
  }
  
  public function realpath() {
    return $this->uri;
  }

  public function unlink($uri) {
    $storage = _storage_core_bridge_load($uri);
    $storage->remove();
    return TRUE;
  }
  
  public function getExternalUrl() {
    $storage = _storage_core_bridge_load($this->uri);
    return $storage->serveURL(TRUE);
  }
  
  
  public static function getMimeType($uri, $mapping = NULL) {
    dsm(__FUNCTION__);
    dsm(func_get_args());

    $storage = _storage_core_bridge_load($this->uri);
    return $storage->mimetype;
  }

  public function getUri() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
    
    return $this->uri;
  }
  

  public function dirname($uri = NULL) {
    dsm(__FUNCTION__);
    dsm(func_get_args());

    list($scheme, $target) = explode('://', $uri, 2);
    $target  = $this->getTarget($uri);
    $dirname = dirname($target);

    if ($dirname == '.') {
      $dirname = '';
    }

    return $scheme . '://' . $dirname;
  }

  public function stream_lock($operation) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_read($count) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_eof() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_seek($offset, $whence) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_tell() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_stat() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function rename($from_uri, $to_uri) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function rmdir($uri, $options) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_opendir($uri, $options) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_readdir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_rewinddir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_closedir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
}

