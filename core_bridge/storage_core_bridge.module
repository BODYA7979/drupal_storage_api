<?php
// $Id$

// Copyright 2010-2011 Jonathan Brown


function _storage_core_bridge_selector_name($field_name) {

  return str_replace('_', '-', $field_name);
}


/**
 * Implements hook_stream_wrappers().
 */
function storage_core_bridge_stream_wrappers() {

  if (strpos($_GET['q'], 'admin/structure/types/manage/') === 0 && arg(5) == 'fields') {
  
    $field_name = _storage_core_bridge_selector_name(arg(6));
  }
  else {
    $field_name = NULL;
  }
  
  $selectors = variable_get('storage_core_bridge_selectors', array());
  
  if ($field_name) {
    if (!in_array($field_name, $selectors)) {
    
      storage_selector('storage_core_bridge', $field_name)->create();
      $selectors[] = $field_name;
      variable_set('storage_core_bridge_selectors', $selectors);
    }
  }
  
  $wrappers = array();  
  foreach ($selectors as $selector_name) {

    $wrappers['storage-' . $selector_name] = array(
      'name' => t("Storage class (select below)"),
      'class' => 'DrupalStorageStreamWrapper',
      'description' => t("Files managed by Storage API."),
      'type' => ($selector_name == $field_name) ? STREAM_WRAPPERS_NORMAL : STREAM_WRAPPERS_HIDDEN,
    );
  }
  
  return $wrappers;
}


function _storage_core_bridge_styled_selector($field_name) {

  $description = "Styled images will be stored in this class.<br />";
  $description .= "This can be safely changed at any time.";

  return storage_selector('storage_core_bridge', 'styled-' . _storage_core_bridge_selector_name($field_name))
    ->formItem(t("Styled storage class"), t($description));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function storage_core_bridge_form_field_ui_field_settings_form_alter(array &$form, array &$form_state) {

  if (!in_array($form['field']['type']['#value'], array('file', 'image'))) {
    return;
  }

  $form['field']['settings']['storage_class'] = storage_selector('storage_core_bridge', 
    _storage_core_bridge_selector_name($form['field']['field_name']['#value']))->formItem();

  $form['field']['settings']['uri_scheme']['#weight'] = -3;
  $form['field']['settings']['storage_class']['#weight'] = -2;

  if ($form['field']['type']['#value'] == 'image') {
    $form['field']['settings']['storage_class_styled'] = 
      _storage_core_bridge_styled_selector($form['field']['field_name']['#value']);
    $form['field']['settings']['storage_class_styled']['#weight'] = -1;
  }

  $form['#submit'][] = 'storage_core_bridge_field_ui_field_settings_form_submit';
}


function storage_core_bridge_field_ui_field_settings_form_submit(array $form, array &$form_state) {

  storage_selector('storage_core_bridge', _storage_core_bridge_selector_name($form['field']['field_name']['#value']))
    ->submit($form_state['values']['field']['settings']['storage_class']);

  if ($form['field']['type']['#value'] == 'image') {
    storage_selector('storage_core_bridge', 'styled-' . 
      _storage_core_bridge_selector_name($form['field']['field_name']['#value']))
      ->submit($form_state['values']['field']['settings']['storage_class_styled']);
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function storage_core_bridge_form_field_ui_field_edit_form_alter(array &$form, array &$form_state) {

  if (!in_array($form['#field']['type'], array('file', 'image'))) {
    return;
  }

  $form['field']['settings']['storage_class'] = storage_selector('storage_core_bridge', 
    _storage_core_bridge_selector_name($form['#field']['field_name']))->formItem();
    
  $form['field']['settings']['uri_scheme']['#weight'] = -3;
  $form['field']['settings']['storage_class']['#weight'] = -2;
  
  if ($form['#field']['type'] == 'image') {
    $form['field']['settings']['storage_class_styled'] = 
      _storage_core_bridge_styled_selector($form['#field']['field_name']);
    $form['field']['settings']['storage_class_styled']['#weight'] = -1;
  }

  $form['#submit'][] = 'storage_core_bridge_field_ui_field_edit_form_submit';
}


function storage_core_bridge_field_ui_field_edit_form_submit(array $form, array &$form_state) {

  storage_selector('storage_core_bridge', _storage_core_bridge_selector_name($form['#field']['field_name']))
    ->submit($form_state['values']['field']['settings']['storage_class']);
    
  if ($form['#field']['type'] == 'image') {
    storage_selector('storage_core_bridge', 'styled-' . 
      _storage_core_bridge_selector_name($form['#field']['field_name']))
      ->submit($form_state['values']['field']['settings']['storage_class_styled']);
  }
}


/**
 * Implements hook_field_delete_field().
 */
function storage_core_bridge_field_delete_field($field) {
  
  if (!in_array($field['type'], array('file', 'image'))) {
    return;
  }

  $selectors = variable_get('storage_core_bridge_selectors', array());
  unset($selectors[_storage_core_bridge_selector_name($field['field_name'])]);
  variable_set('storage_core_bridge_selectors', $selectors);
}


function _storage_core_bridge_storage_id($uri) {

  return db_select('storage')
    ->fields('storage', array('storage_id'))
    ->condition('storage.uri', $uri)
    ->execute()
    ->fetchField();
}


function _storage_core_bridge_load($uri) {

  return storage_load(_storage_core_bridge_storage_id($uri));
}


function storage_core_bridge_styled_image_load($uri, $style) {

  $source_id = _storage_core_bridge_storage_id($uri);

  $storage_id = db_select('storage_styled_image')
    ->fields('storage_styled_image', array('storage_id'))
    ->condition('storage_styled_image.source_id', $source_id)
    ->condition('storage_styled_image.style', $style)
    ->execute()
    ->fetchField();
    
  if ($storage_id) {
    $storage = storage_load($storage_id);
  }
  else {
    $options = array(
      'module' => 'storage_core_bridge',
      'type' => 'styled_image',
    );

    $storage = storage_selector('storage_core_bridge', 'styled-' . substr(file_uri_scheme($uri), 8))
      ->storageAdd($options);
    
    db_insert('storage_styled_image')
      ->fields(array(
        'source_id' => $source_id,
        'style' => $style,
        'storage_id' => $storage->storage_id,
      ))
      ->execute();
  }
  
  return $storage;
}


/**
 * Implements hook_storage_generate().
 */
function storage_core_bridge_storage_generate(Storage $storage) {

  $styled_image = db_select('storage_styled_image')
    ->fields('storage_styled_image')
    ->condition('storage_styled_image.storage_id', $storage->storage_id)
    ->execute()
    ->fetchAssoc();
    
  if (!$styled_image) {
    throw new Exception();
  }
  
  $source_storage = storage_load($styled_image['source_id']);
  
  if (!$source_storage) {
    throw new Exception();
  }
  
  $style = image_style_load($styled_image['style']);
  $source = $source_storage->getLocalFilepath($keepme);
  $destination = tempnam(file_directory_temp(), '');

  image_style_create_derivative($style, $source, $destination);
  
//  return array($destination, $styled_image['style'] . '/' . $source_storage->filename);
  return array($destination, $source_storage->filename);
}


/**
 * Implements hook_image_style_flush().
 */
function storage_core_bridge_image_style_flush($style) {

  $storage_ids = db_select('storage_styled_image')
    ->fields('storage_styled_image', array('storage_id'))
    ->condition('storage_styled_image.style', $style['name'])
    ->execute()
    ->fetchCol();
    
  foreach ($storage_ids as $storage_id) {
    storage_load($storage_id)->remove();
  }
  
  db_delete('storage_styled_image')
    ->condition('storage_styled_image.style', $style['name'])
    ->execute();
}


class DrupalStorageStreamWrapper implements DrupalStreamWrapperInterface {
  protected $uri;
  protected $filepath;
  protected $fp;

  protected function selectorName() {
  
    return substr(file_uri_scheme($this->uri), 8);
  }

  public function url_stat($uri, $flags) {
    global $storage_core_bridge_filename;
    $filename = file_uri_target($uri);

    if ($filename == '') {
      unset($storage_core_bridge_filename);
      return array('mode' => 0040666);
    }
    
    if (!isset($storage_core_bridge_filename))
      $storage_core_bridge_filename = $filename;

    $storage = _storage_core_bridge_load($uri);
    
    if (!$storage)
      return FALSE;
      
    $stat = array(
      'mode' => 0100666,
      'size' => $storage->size,
      'atime' => $storage->last_touched,
      'mtime' => $storage->obtained,
      'ctime' => $storage->obtained,
    );

    return $stat;
  }
  
  public function setUri($uri) {
    $this->uri = $uri;
  }
  
  public function getTarget($uri = NULL) {
    if (!isset($uri)) {
      $uri = $this->uri;
    }

    list($scheme, $target) = explode('://', $uri, 2);

    // Remove erroneous leading or trailing, forward-slashes and backslashes.
    return trim($target, '\/');
  }

  public function mkdir($uri, $mode, $options) {    // dont define?
    dsm(__FUNCTION__);
    dsm(func_get_args());

    return TRUE;
  }
  
  public function getDirectoryPath() {
    return '';
  }
  
  public function chmod($mode) {
    return TRUE;
  }
  
  public function stream_open($uri, $mode, $options, &$opened_url) {
    $this->uri = $uri;
    $this->filepath = drupal_tempnam('temporary://', 'storage');
    $this->fp = fopen($this->filepath, "w");
    return TRUE;
  }
  
  public function stream_write($data) {
    return fwrite($this->fp, $data);
  }
  
  public function stream_flush() {
    return fflush($this->fp);
  }
  
  public function stream_close() {
    global $storage_core_bridge_filename;
    fclose($this->fp);
    
    $options = array(
      'filepath' => $this->filepath,
      'filename' => $storage_core_bridge_filename,
      'module' => 'storage_core_bridge',
      'uri' => $this->uri,
    );
    
    try {
      storage_selector('storage_core_bridge', $this->selectorName())->storageAdd($options);
    }
    catch (Exception $e) {}
  }
  
  public function realpath() {
    return $this->uri;
  }
  
  private function deleteStyledImages(Storage $storage) {
  
    $storage_ids = db_select('storage_styled_image')
      ->fields('storage_styled_image', array('storage_id'))
      ->condition('storage_styled_image.source_id', $storage->storage_id)
      ->execute()
      ->fetchCol();
      
    foreach ($storage_ids as $storage_id) {
      storage_load($storage_id)->remove();
    }
    
    db_delete('storage_styled_image')
      ->condition('storage_styled_image.source_id', $storage->storage_id)
      ->execute();
  }

  public function unlink($uri) {
    $storage = _storage_core_bridge_load($uri);
    $storage->remove();
    $this->deleteStyledImages($storage);
    return TRUE;
  }
  
  public function getExternalUrl() {
    $components = explode('/', file_uri_target($this->uri));
    $scheme = file_uri_scheme($this->uri);

    if ((array_shift($components) == 'styles') && ($style = array_shift($components)) && 
      (array_shift($components) == $scheme))
    {
      $storage = storage_core_bridge_styled_image_load($scheme . '://' . implode('/', $components), $style);
    }
    else {
      $storage = _storage_core_bridge_load($this->uri);
    }

    return $storage->serveURL(TRUE);
  }
  
  
  public static function getMimeType($uri, $mapping = NULL) {
    dsm(__FUNCTION__);
    dsm(func_get_args());

    $storage = _storage_core_bridge_load($this->uri);
    return $storage->mimetype;
  }

  public function getUri() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
    
    return $this->uri;
  }
  

  public function dirname($uri = NULL) {
    dsm(__FUNCTION__);
    dsm(func_get_args());

    list($scheme, $target) = explode('://', $uri, 2);
    $target  = $this->getTarget($uri);
    $dirname = dirname($target);

    if ($dirname == '.') {
      $dirname = '';
    }

    return $scheme . '://' . $dirname;
  }

  public function stream_lock($operation) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_read($count) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_eof() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_seek($offset, $whence) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_tell() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function stream_stat() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function rename($from_uri, $to_uri) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function rmdir($uri, $options) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_opendir($uri, $options) {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_readdir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_rewinddir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
  
  public function dir_closedir() {
    dsm(__FUNCTION__);
    dsm(func_get_args());
  }
}

